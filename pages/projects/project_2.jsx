import styles from "@/styles/project.module.css";
import { useState } from "react";

export default function Project15() {
  const [openSection, setOpenSection] = useState("overview");

  const toggle = (section) => () => setOpenSection((prev) => (prev === section ? null : section));

  return (
    <div className={styles.projectWrapper}>
      <h1 className={styles.title}>Car Rental System</h1>
      <div className={styles.keywords}>
        <p>#Java</p>
        <p>#JavaFX</p>
      </div>
      <p className={styles.desc}>JavaFX UI to manage customers, cars, and rental records.</p>
      <div className={styles.links}>
        <a href="https://github.com/Salma-Eletreby/Car-Company-Rental-System.git" target="_blank" rel="noopener noreferrer">
          üîó View Repository
        </a>
      </div>

      <div className={styles.tabsContainer}>
        <button className={styles.toggleBtn} onClick={toggle("overview")}>
          üìò Overview
        </button>
        <button className={styles.toggleBtn} onClick={toggle("gallery")}>
          üñºÔ∏è Gallery
        </button>
        <button className={styles.toggleBtn} onClick={toggle("features")}>
          ‚öôÔ∏è Features
        </button>
        <button className={styles.toggleBtn} onClick={toggle("challenges")}>
          üß© Challenges
        </button>
      </div>

      {openSection === "overview" && (
        <div className={`${styles.section} ${styles.fadeIn}`}>
          <p>Welcome to the FCars Car Rental System! This project aims to provide a comprehensive solution for managing a car rental business. Developed using Java for the backend, JavaFX for the frontend, and file read/write for the database, this system streamlines various operations including customer management, car rentals, and payment processing.</p>
          <br />
          <h4>üîπ Reports</h4>
          <ul>
            <li>
              <strong>Available Cars:</strong> View a list of all cars that are currently not rented.
            </li>
            <li>
              <strong>Registered Customers:</strong> Generate a report of all customers registered in the system.
            </li>
            <li>
              <strong>Rented Cars:</strong> Get a list of cars that are currently rented.
            </li>
            <li>
              <strong>Income:</strong> View the total income generated by the company.
            </li>
          </ul>
          <br />
          <p>The system is designed to simplify management tasks and ensure the smooth operation of the car rental process, while providing a user-friendly interface powered by JavaFX. The use of file read/write allows for simple and efficient data storage.</p>
        </div>
      )}

      {openSection === "gallery" && (
        <div className={`${styles.section} ${styles.fadeIn}`}>
          <div className={styles.grid}>
            {[...Array(7)].map((_, i) => (
              <div key={i} className={styles.imageItem}>
                <img src={`/project_2/image-${i + 1}.png`} alt={`Screenshot ${i + 1}`} className={styles.imageHover} />
              </div>
            ))}
          </div>
        </div>
      )}

      {openSection === "features" && (
        <div className={`${styles.section} ${styles.fadeIn}`}>
          <ul>
            <li>Customer Management where you can easily add, update, or delete customer records.</li>
            <li>Car Management where you can Add, update, and delete newly purchased car information.</li>
            <li>Rental Payments where a user can Manage rental payments by adding, updating, or deleting payment records.</li>
          </ul>
        </div>
      )}

      {openSection === "challenges" && (
        <div className={`${styles.section} ${styles.fadeIn}`}>
          <ul>
            <li>
              <strong>Challenge:</strong> Ensuring that cars are accurately marked as rented or available in real-time, especially in multi-user environments.
              <br></br>
              <strong>Solution:</strong> Use event-driven programming with JavaFX to instantly update the availability status when a car is rented or returned. Additionally, consider adding timestamps to rental records for better tracking.
            </li>
            <li>
              <strong>Challenge:</strong> JavaFX applications may struggle with responsiveness, especially with large amounts of data or complex UI elements.
              <br></br>
              <strong>Solution:</strong> Optimize the user interface by using background threads for heavy tasks (e.g., loading data) to avoid blocking the UI. Consider using pagination or lazy loading for large data sets.
            </li>
          </ul>
        </div>
      )}
    </div>
  );
}
